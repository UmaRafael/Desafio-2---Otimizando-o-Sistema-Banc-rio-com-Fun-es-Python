def depositar(saldo, valor, extrato):
    """
    Realiza um depósito na conta bancária.
    
    Args:
        saldo (float): Saldo atual da conta.
        valor (float): Valor a ser depositado.
        extrato (str): Histórico de transações.
        
    Returns:
        tuple: Novo saldo e extrato atualizado.
    """
    if valor > 0:
        saldo += valor
        extrato += f"Depósito: R$ {valor:.2f}\n"
        return saldo, extrato
    else:
        print("Operação falhou! O valor informado é inválido.")
        return saldo, extrato


def sacar(*, saldo, valor, extrato, limite, numero_saques, limite_saques):
    """
    Realiza um saque na conta bancária.
    
    Args (keyword only):
        saldo (float): Saldo atual da conta.
        valor (float): Valor a ser sacado.
        extrato (str): Histórico de transações.
        limite (float): Limite por saque.
        numero_saques (int): Número de saques já realizados.
        limite_saques (int): Limite máximo de saques.
        
    Returns:
        tuple: Novo saldo, extrato atualizado e número de saques.
    """
    excedeu_saldo = valor > saldo
    excedeu_limite = valor > limite
    excedeu_saques = numero_saques >= limite_saques

    if excedeu_saldo:
        print("Operação falhou! Você não tem saldo suficiente.")
    elif excedeu_limite:
        print("Operação falhou! O valor do saque excede o limite.")
    elif excedeu_saques:
        print("Operação falhou! Número máximo de saques excedido.")
    elif valor > 0:
        saldo -= valor
        extrato += f"Saque: R$ {valor:.2f}\n"
        numero_saques += 1
    else:
        print("Operação falhou! O valor informado é inválido.")
        
    return saldo, extrato, numero_saques


def exibir_extrato(saldo, /, *, extrato):
    """
    Exibe o extrato bancário.
    
    Args:
        saldo (float, positional only): Saldo atual da conta.
        extrato (str, keyword only): Histórico de transações.
    """
    print("\n================ EXTRATO ================")
    print("Não foram realizadas movimentações." if not extrato else extrato)
    print(f"\nSaldo: R$ {saldo:.2f}")
    print("==========================================")


def criar_usuario(usuarios):
    """
    Cria um novo usuário do sistema bancário.
    
    Args:
        usuarios (list): Lista de usuários existentes.
        
    Returns:
        dict: Dicionário com os dados do usuário ou None se houve erro.
    """
    cpf = input("Informe o CPF (somente números): ")
    
    # Verifica se CPF já existe
    usuario = filtrar_usuario(cpf, usuarios)
    if usuario:
        print("Erro: Já existe usuário com esse CPF!")
        return None
    
    nome = input("Informe o nome completo: ").upper()
    data_nascimento = input("Informe a data de nascimento (dd/mm/aaaa): ")
    endereco = input("Informe o endereço (logradouro, bairro, cidade/UF): ")
    
    # Validações básicas
    if not nome.replace(" ", "").isalpha():
        print("Erro: Nome deve conter apenas letras!")
        return None
        
    if not cpf.isdigit():
        print("Erro: CPF deve conter apenas números!")
        return None
    
    novo_usuario = {
        "nome": nome,
        "data_nascimento": data_nascimento,
        "cpf": cpf,
        "endereco": endereco
    }
    
    usuarios.append(novo_usuario)
    print("Usuário criado com sucesso!")
    return novo_usuario


def filtrar_usuario(cpf, usuarios):
    """
    Filtra usuário por CPF.
    
    Args:
        cpf (str): CPF do usuário a ser encontrado.
        usuarios (list): Lista de usuários.
        
    Returns:
        dict: Usuário encontrado ou None.
    """
    for usuario in usuarios:
        if usuario["cpf"] == cpf:
            return usuario
    return None


def criar_conta(agencia, numero_conta, usuarios):
    """
    Cria uma nova conta corrente.
    
    Args:
        agencia (str): Número da agência.
        numero_conta (str): Número da conta.
        usuarios (list): Lista de usuários existentes.
        
    Returns:
        dict: Dados da conta criada ou None se houve erro.
    """
    cpf = input("Informe o CPF do usuário: ")
    usuario = filtrar_usuario(cpf, usuarios)
    
    if not usuario:
        print("Erro: Usuário não encontrado!")
        return None
    
    nova_conta = {
        "agencia": agencia,
        "numero_conta": numero_conta,
        "usuario": usuario
    }
    
    print("Conta criada com sucesso!")
    return nova_conta


def main():
    """
    Função principal que executa o sistema bancário.
    """
    menu = """
[d] Depositar
[s] Sacar
[e] Extrato
[u] Criar Usuário
[c] Criar Conta
[q] Sair

=> """
    
    saldo = 0
    limite = 500
    extrato = ""
    numero_saques = 0
    LIMITE_SAQUES = 3
    AGENCIA = "0001"
    usuarios = []
    contas = []
    
    while True:
        opcao = input(menu)

        if opcao == "d":
            valor = float(input("Informe o valor do depósito: "))
            saldo, extrato = depositar(saldo, valor, extrato)

        elif opcao == "s":
            valor = float(input("Informe o valor do saque: "))
            
            saldo, extrato, numero_saques = sacar(
                saldo=saldo,
                valor=valor,
                extrato=extrato,
                limite=limite,
                numero_saques=numero_saques,
                limite_saques=LIMITE_SAQUES
            )

        elif opcao == "e":
            exibir_extrato(saldo, extrato=extrato)

        elif opcao == "u":
            criar_usuario(usuarios)

        elif opcao == "c":
            numero_conta = len(contas) + 1
            conta = criar_conta(AGENCIA, f"{numero_conta:06d}", usuarios)
            
            if conta:
                contas.append(conta)

        elif opcao == "q":
            break

        else:
            print("Operação inválida, por favor selecione novamente a operação desejada.")


if __name__ == "__main__":
    main()
